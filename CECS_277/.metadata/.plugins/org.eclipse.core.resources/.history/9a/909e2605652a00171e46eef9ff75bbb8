import java.util.ArrayList;
import java.util.List;
import java.util.Set;

public class genericHashTable <K, V> {
	private Hashnode<K, V>[] nodes;
	private List<K> keyz = new ArrayList<K>();
	
	public genericHashTable(){
		nodes = new Hashnode[100000];
	};
	
	public genericHashTable(int size){
		nodes = new Hashnode[size];
	}
	/**
	 * - get the index in the hashtable of the key
	 * @param key
	 * @return int (hash code of key_
	 */
	public int getIndex(K key){
		int hash = key.hashCode() % keyz.size();
		if(hash < 0){
			hash = hash + nodes.length;
		}
		return hash;
	}
	/**
	 * - open hashing
	 * - if node exist, then keep incriminting hash until finds an open index in table
	 * @param key
	 * @param val
	 * @return
	 */
	public void insert(K key, V val){
		keyz.add(key);
		int hash = getIndex(key);
		int index = hash;
		while(nodes[index] != null){
			index++;
		}
		Hashnode<K, V> newNode = new Hashnode(key, val, hash, index);
		nodes[index] = newNode;  
		System.out.println(nodes[index].toString() + nodes[index].index + "  " + nodes[index].hash);
	}
	
	public V remove(K key){
		int hash = getIndex(key);
		int index = hash;
		int numOfSameKeys = 0;
		Hashnode<K, V> node;
		//find the number of multiple of the same key
		while(nodes[index] != null){
			if(nodes[index].hash == hash && key == nodes[index].key)
				numOfSameKeys++;
			index++;
		}
		Hashnode<K,V> prev = null;
		index = hash;
		if(numOfSameKeys == 1)
			keyz.remove(key);
		for(Hashnode<K, V> n = nodes[hash]; numOfSameKeys > 0; index++){
			if(nodes[index].hash == hash && key == nodes[index].key)
				numOfSameKeys--;
			if(numOfSameKeys == 0){
//				if(prev != null)
//					prev.next = n.next;
//				else{
//					//nodes[index] = n.next;
					nodes[index] = null;
					while(nodes[++index] != null){
						if(nodes[index].hash != nodes[index].index && nodes[nodes[index].hash] == null){
							Hashnode<K,V> t = nodes[index];
							remove(t.key);
							insert(t.key, t.value);
						}
							
					}
				}
			}
			//prev = n;
		return null;
	}
	
	public V get(K key){
		int hash = getIndex(key);
		for(Hashnode<K,V> n = nodes[hash]; n != null; n = n.next){
			System.out.println(n);
			if(key.equals(n.key))
				return n.value;
		}
		return null;
			
	}
	
	public List keyList(){
		return keyz;
	}
	
	public String toString(){
		String s = "";
		for(int i = 0; i < keyz.size();){
			System.out.println("jere");
			if(nodes[i] != null){
				s = nodes[i].hash + nodes[i].toString() + " ";
				i++;
			}
		}
		return s;
	}
}
